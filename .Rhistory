country_counts <- virDF %>%
group_by(countryCode) %>%
summarise(total_recs = n()) %>%
mutate(group = cut(total_recs, breaks, labels=FALSE, include.lowest=TRUE))
joinData <- joinCountryData2Map( country_counts,
joinCode = "ISO_A2",
nameJoinColumn = "countryCode")
mapCountryData( joinData, nameColumnToPlot="group", addLegend=FALSE )
#transform to robin for the Robinson projection
sPDF <- spTransform(joinData, CRS=CRS("+proj=robin +ellps=WGS84"))
# Load required libraries
library(ggplot2)
library(maps)
library(dplyr)
library(rnaturalearth)
library(rworldmap)
#aggregate and count records per country
breaks <- c(0, 10, 100, 10000, Inf)
country_counts <- virDF %>%
group_by(countryCode) %>%
summarise(total_recs = n()) %>%
mutate(group = cut(total_recs, breaks, labels=FALSE, include.lowest=TRUE))
joinData <- joinCountryData2Map( country_counts,
joinCode = "ISO_A2",
nameJoinColumn = "countryCode")
mapCountryData( joinData, nameColumnToPlot="group", addLegend=FALSE )
#aggregate and count records per country
breaks <- c(0, 10, 100, 500, 10000, Inf)
country_counts <- virDF %>%
group_by(countryCode) %>%
summarise(total_recs = n()) %>%
mutate(group = cut(total_recs, breaks, labels=FALSE, include.lowest=TRUE))
joinData <- joinCountryData2Map( country_counts,
joinCode = "ISO_A2",
nameJoinColumn = "countryCode")
mapCountryData( joinData, nameColumnToPlot="group", addLegend=FALSE )
#aggregate and count records per country
breaks <- c(0, 10, 100, 500, 1000, Inf)
country_counts <- virDF %>%
group_by(countryCode) %>%
summarise(total_recs = n()) %>%
mutate(group = cut(total_recs, breaks, labels=FALSE, include.lowest=TRUE))
joinData <- joinCountryData2Map( country_counts,
joinCode = "ISO_A2",
nameJoinColumn = "countryCode")
mapCountryData( joinData, nameColumnToPlot="group", addLegend=FALSE )
#aggregate and count records per country
breaks <- c(0, 10, 100, 1000, Inf)
country_counts <- virDF %>%
group_by(countryCode) %>%
summarise(total_recs = n()) %>%
mutate(group = cut(total_recs, breaks, labels=FALSE, include.lowest=TRUE))
joinData <- joinCountryData2Map( country_counts,
joinCode = "ISO_A2",
nameJoinColumn = "countryCode")
mapCountryData( joinData, nameColumnToPlot="group", addLegend=FALSE )
joinData <- joinCountryData2Map( country_counts,
joinCode = "ISO2",
nameJoinColumn = "countryCode")
mapCountryData( joinData, nameColumnToPlot="group", addLegend=FALSE )
#transform to robin for the Robinson projection
sPDF <- spTransform(joinData, CRS=CRS("+proj=robin +ellps=WGS84"))
colourPalette <- brewer.pal(5,'RdPu')
library(RColorBrewer)
colourPalette <- brewer.pal(5,'RdPu')
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE)
mapCountryData( sPDF,
nameColumnToPlot="group",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE)
mapCountryData( sPDF,
nameColumnToPlot="group",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 3)
mapCountryData( sPDF,
nameColumnToPlot="group",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 5)
country_counts <- virDF %>%
group_by(countryCode) %>%
summarise(total_recs = n()) %>%
mutate(group = cut(total_recs, breaks, labels=FALSE, include.lowest=TRUE)) %>%
mutate(cnt.log = log(total_recs))
joinData <- joinCountryData2Map( country_counts,
joinCode = "ISO2",
nameJoinColumn = "countryCode")
mapCountryData( joinData, nameColumnToPlot="group", addLegend=FALSE )
mapCountryData( joinData, nameColumnToPlot="cnt.log", addLegend=FALSE )
#transform to robin for the Robinson projection
sPDF <- spTransform(joinData, CRS=CRS("+proj=robin +ellps=WGS84"))
#transform to robin for the Robinson projection
sPDF <- spTransform(joinData, CRS=CRS("+proj=robin +ellps=WGS84"))
colourPalette <- brewer.pal(5,'RdPu')
mapCountryData( sPDF,
nameColumnToPlot="group",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 3)
mapCountryData( sPDF,
nameColumnToPlot="group",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 5)
mapCountryData( sPDF,
nameColumnToPlot="cnt.log",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 5)
#aggregate and count records per country
breaks <- c(0, 10, 100, 1000, 10000)
country_counts <- virDF %>%
group_by(countryCode) %>%
summarise(total_recs = n()) %>%
mutate(group = cut(total_recs, breaks, labels=FALSE, include.lowest=TRUE)) %>%
mutate(cnt.log = log(total_recs))
joinData <- joinCountryData2Map( country_counts,
joinCode = "ISO2",
nameJoinColumn = "countryCode")
mapCountryData( joinData, nameColumnToPlot="group", addLegend=FALSE )
mapCountryData( joinData, nameColumnToPlot="cnt.log", addLegend=FALSE )
#transform to robin for the Robinson projection
sPDF <- spTransform(joinData, CRS=CRS("+proj=robin +ellps=WGS84"))
colourPalette <- brewer.pal(5,'RdPu')
mapCountryData( sPDF,
nameColumnToPlot="cnt.log",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 5)
mapCountryData( sPDF,
nameColumnToPlot="cnt.log",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 5,
colourPalette = colourPalette)
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 5,
colourPalette = colourPalette)
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 5,
colourPalette = colourPalette,
oceanCol='lightblue')
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 5,
colourPalette = colourPalette)
colourPalette <- brewer.pal(5,'PiYG')
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 5,
colourPalette = colourPalette)
colourPalette <- brewer.pal(5,'RdYlGn')
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 5,
colourPalette = colourPalette)
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 5,
colourPalette = -colourPalette)
colourPalette <- brewer.pal(5,'PuBuGn')
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 5,
colourPalette = colourPalette)
colourPalette <- brewer.pal(5,'BuPu')
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 5,
colourPalette = colourPalette)
colourPalette <- brewer.pal(5,'Oranges')
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 5,
colourPalette = colourPalette)
colourPalette <- brewer.pal(5,'Blues')
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 5,
colourPalette = colourPalette)
colourPalette <- brewer.pal(5,'Greens')
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = TRUE,
numCats = 5,
colourPalette = colourPalette)
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colourPalette)
colourPalette <- brewer.pal(5,'GnBu')
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colourPalette)
colourPalette <- brewer.pal(5,'Reds')
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colourPalette)
####RICHNESS
vir.richness <- virDF %>%
group_by(countryCode, genus) %>%
summarise(total_recs = n())
View(vir.richness)
####RICHNESS
vir.richness <- virDF %>%
group_by(countryCode, genus) %>%
summarise(total_recs = n()) %>%
filter!(countryCode="")
####RICHNESS
vir.richness <- virDF %>%
group_by(countryCode, genus) %>%
summarise(total_recs = n()) %>%
filter(!countryCode="")
####RICHNESS
vir.richness <- virDF %>%
group_by(countryCode, genus) %>%
summarise(total_recs = n()) %>%
filter(!countryCode=="")
try <- vir.richness %>%
group_by(countryCode) %>%
mutate(div=sum(total_recs))
View(try)
relative_abundance <- virDF %>%
group_by(countryCode) %>%
mutate(rel.Div = total_recs / sum(total_recs)) %>%
ungroup()
relative_abundance <- country_counts %>%
group_by(countryCode) %>%
mutate(rel.Div = total_recs / sum(total_recs)) %>%
ungroup()
View(relative_abundance)
View(country_counts)
country_counts <- virDF %>%
group_by(countryCode) %>%
summarise(total_recs = n()) %>%
summarise(rel.div = total_recs/sum(total_recs)) %>%
mutate(group = cut(total_recs, breaks, labels=FALSE, include.lowest=TRUE)) %>%
mutate(cnt.log = log(total_recs))
country_counts <- virDF %>%
group_by(countryCode) %>%
summarise(total_recs = n()) %>%
mutate(rel.div = total_recs/sum(total_recs)) %>%
mutate(group = cut(total_recs, breaks, labels=FALSE, include.lowest=TRUE)) %>%
mutate(cnt.log = log(total_recs))
joinData <- joinCountryData2Map( country_counts,
joinCode = "ISO2",
nameJoinColumn = "countryCode")
mapCountryData( joinData, nameColumnToPlot="cnt.log", addLegend=FALSE )
#change projection
par(mai=c(0,0,0.2,0),xaxs="i",yaxs="i")
#transform to robin for the Robinson projection
sPDF <- spTransform(joinData, CRS=CRS("+proj=robin +ellps=WGS84"))
colourPalette <- brewer.pal(5,'Reds')
colourPalette1 <- brewer.pal(5,'Reds')
colCounts <- brewer.pal(5,'Reds')
colDiversity <- brewer.pal(5, 'BuPu')
colCounts <- brewer.pal(5,'Reds')
colDiversity <- brewer.pal(5, 'BuPu')
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colCounts)
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colDiversity)
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colCounts)
m1<-mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colCounts)
m2<-mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colCounts)
m1
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colCounts)
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colCounts)
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus taxonomic diversity (genera/country) by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colCounts)
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus relative taxonomic diversity by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colCounts)
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colCounts)
colDiversity <- brewer.pal(5, 'Blues')
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus relative taxonomic diversity by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colDiversity)
mapCountryData( sPDF,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus occurrence by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colCounts)
mapCountryData( sPDF,
nameColumnToPlot="rel.div",
mapTitle='GBIF plant virus relative taxonomic diversity by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colDiversity)
plot(country_counts$total_recs~country_counts$rel.div)
sum(country_counts$total_recs)
16410/94656
830/94656
country_counts <- virDF %>%
group_by(countryCode) %>%
summarise(total_recs = n()) %>%
mutate(rel.div = log(total_recs/sum(total_recs)))%>%
mutate(group = cut(total_recs, breaks, labels=FALSE, include.lowest=TRUE)) %>%
mutate(cnt.log = log(total_recs))
joinData <- joinCountryData2Map( country_counts,
joinCode = "ISO2",
nameJoinColumn = "countryCode")
mapCountryData( joinData, nameColumnToPlot="cnt.log", addLegend=FALSE )
#transform to robin for the Robinson projection
sPDF <- spTransform(joinData, CRS=CRS("+proj=robin +ellps=WGS84"))
mapCountryData( sPDF,
nameColumnToPlot="rel.div",
mapTitle='GBIF plant virus relative taxonomic diversity by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colDiversity)
plot(country_counts$total_recs~country_counts$rel.div)
4057/94656
country_counts <- virDF %>%
group_by(countryCode) %>%
summarise(total_recs = n()) %>%
mutate(rel.div = total_recs/sum(total_recs))%>%
mutate(group = cut(total_recs, breaks, labels=FALSE, include.lowest=TRUE)) %>%
mutate(cnt.log = log(total_recs))
plot(country_counts$total_recs~country_counts$rel.div)
####RICHNESS
vir.richness <- virDF %>%
group_by(countryCode, genus) %>%
summarise(total_recs = n()) %>%
filter(!countryCode=="")
View(vir.richness)
joinData2 <- joinCountryData2Map( vir.richness,
joinCode = "ISO2",
nameJoinColumn = "countryCode")
mapCountryData( joinData2, nameColumnToPlot="total_recs", addLegend=FALSE )
View(joinData2)
sPDF2 <- spTransform(joinData2, CRS=CRS("+proj=robin +ellps=WGS84"))
mapCountryData( sPDF2,
nameColumnToPlot="rel.div",
mapTitle='GBIF plant virus relative taxonomic diversity by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colDiversity)
View(sPDF2)
mapCountryData( sPDF2,
nameColumnToPlot="total.recs",
mapTitle='GBIF plant virus relative taxonomic diversity by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colDiversity)
mapCountryData( sPDF2,
nameColumnToPlot="total_recs",
mapTitle='GBIF plant virus relative taxonomic diversity by country',
addLegend = FALSE,
numCats = 5,
colourPalette = colDiversity)
#relationship between number of records and number of taxa isolated
genDiv <- virDF %>%
group_by(countryCode, genus)
#relationship between number of records and number of taxa isolated
genDiv <- virDF %>%
group_by(countryCode, genus) %>%
tally(n=()))
#relationship between number of records and number of taxa isolated
genDiv <- virDF %>%
group_by(countryCode, genus) %>%
tally(n=())
#relationship between number of records and number of taxa isolated
genDiv <- virDF %>%
group_by(countryCode, genus) %>%
summarize(count=n())
View(genDiv)
#relationship between number of records and number of taxa isolated
genDiv <- virDF %>%
group_by(countryCode, genus) %>%
filter(!countryCode=="") %>%
summarize(count=n())
country_counts <- virDF %>%
group_by(countryCode) %>%
summarise(total_recs = n()) %>%
mutate(group = cut(total_recs, breaks, labels=FALSE, include.lowest=TRUE)) %>%
mutate(cnt.log = log(total_recs))
#Basis of records?
table(virDF$basisOfRecord) #mostly material samples
View(virDF)
table(virCoords$year)
world_sf <- ne_countries(returnclass = "sf")
world <- ggplot() +
geom_sf(data = world_sf, fill= "antiquewhite")  +
geom_sf_label(data = label_frame, aes(label = Label)) +
coord_sf(crs= "+proj=robin") +
theme_minimal_grid() +
ggtitle("Robinson projection")
world <- ggplot() +
geom_sf(data = world_sf, fill= "antiquewhite")  +
geom_sf_label(data = virCoords, aes()) +
coord_sf(crs= "+proj=robin") +
theme_minimal_grid() +
ggtitle("Robinson projection")
library("rnaturalearth")
library("ggplot2")
library(sf)
library(lwgeom)
library(cowplot)
world <- ggplot() +
geom_sf(data = world_sf, fill= "antiquewhite")  +
geom_sf_label(data = virCoords, aes()) +
coord_sf(crs= "+proj=robin") +
theme_minimal_grid() +
ggtitle("Robinson projection")
world
world <- ggplot() +
geom_sf(data = world_sf, fill= "antiquewhite")  +
geom_sf(data = virCoords, aes(x=decimalLongitude, y=decimalLatitude)) +
coord_sf(crs= "+proj=robin") +
theme_minimal_grid() +
ggtitle("Robinson projection")
world
world <- ggplot() +
geom_sf(data = world_sf, fill = "antiquewhite")  +
geom_sf(data = virCoords, aes(x = decimalLongitude, y = decimalLatitude)) +
coord_sf(crs = "+proj=robin") +
theme_minimal_grid() +
ggtitle("Robinson projection")
world
virCoords$decimalLatitude
world <- ggplot() +
geom_sf(data = world_sf, fill = "antiquewhite")  +
#geom_sf(data = virCoords, aes(x = decimalLongitude, y = decimalLatitude)) +
coord_sf(crs = "+proj=robin") +
theme_minimal_grid() +
ggtitle("Robinson projection")
world
